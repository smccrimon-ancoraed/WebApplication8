// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication8.Models;

namespace WebApplication8.Migrations
{
    [DbContext(typeof(sakilaContext))]
    [Migration("20191219155133_NewReqs2")]
    partial class NewReqs2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication8.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("actor_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActorId")
                        .HasName("PK__actor__8B2447B5D2C9E04F")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LastName")
                        .HasName("idx_actor_last_name");

                    b.ToTable("actor");
                });

            modelBuilder.Entity("WebApplication8.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("AddressId")
                        .HasName("PK__address__CAA247C9FD235546")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CityId")
                        .HasName("idx_fk_city_id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("WebApplication8.Models.Addressdb", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CityId")
                        .HasColumnName("city_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnName("district")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("AddressId")
                        .HasName("PK__addressd__CAA247C98CCE4F40")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("addressdb");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication8.Models.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("CategoryId")
                        .HasName("PK__category__D54EE9B58C34E6D0")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("category");
                });

            modelBuilder.Entity("WebApplication8.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CityId")
                        .HasName("PK__city__031491A9F8E832B7")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryId")
                        .HasName("idx_fk_country_id");

                    b.ToTable("city");
                });

            modelBuilder.Entity("WebApplication8.Models.CityName", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("City_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName1")
                        .HasColumnName("City_name");

                    b.Property<short>("CountryId")
                        .HasColumnName("Country_id");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("Last_update");

                    b.HasKey("CityId");

                    b.ToTable("CityName");
                });

            modelBuilder.Entity("WebApplication8.Models.Country", b =>
                {
                    b.Property<short>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryId")
                        .HasName("PK__country__7E8CD0549C402D55")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("country");
                });

            modelBuilder.Entity("WebApplication8.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("('Y')")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__CD65CB84850AB0DA")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId")
                        .HasName("idx_fk_address_id");

                    b.HasIndex("LastName")
                        .HasName("idx_last_name");

                    b.HasIndex("StoreId")
                        .HasName("idx_fk_store_id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("WebApplication8.Models.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("film_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<byte>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short?>("Length")
                        .HasColumnName("length");

                    b.Property<byte?>("OriginalLanguageId")
                        .HasColumnName("original_language_id");

                    b.Property<string>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rating")
                        .HasDefaultValueSql("('G')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ReleaseYear")
                        .HasColumnName("release_year")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<byte>("RentalDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rental_duration")
                        .HasDefaultValueSql("((3))");

                    b.Property<decimal>("RentalRate")
                        .HasColumnName("rental_rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReplacementCost")
                        .HasColumnName("replacement_cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SpecialFeatures")
                        .HasColumnName("special_features")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("FilmId")
                        .HasName("PK__film__349764A88349E4E3")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LanguageId")
                        .HasName("idx_fk_language_id");

                    b.HasIndex("OriginalLanguageId")
                        .HasName("idx_fk_original_language_id");

                    b.ToTable("film");
                });

            modelBuilder.Entity("WebApplication8.Models.FilmActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnName("actor_id");

                    b.Property<int>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ActorId", "FilmId")
                        .HasName("PK__film_act__086D31FFFDED42D0")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ActorId")
                        .HasName("idx_fk_film_actor_actor");

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_actor_film");

                    b.ToTable("film_actor");
                });

            modelBuilder.Entity("WebApplication8.Models.FilmCategory", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<byte>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FilmId", "CategoryId")
                        .HasName("PK__film_cat__69C38A33CCF97640")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CategoryId")
                        .HasName("idx_fk_film_category_category");

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_category_film");

                    b.ToTable("film_category");
                });

            modelBuilder.Entity("WebApplication8.Models.FilmText", b =>
                {
                    b.Property<short>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("FilmId")
                        .HasName("PK__film_tex__349764A8DEFC31C6")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("film_text");
                });

            modelBuilder.Entity("WebApplication8.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnName("film_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.HasKey("InventoryId")
                        .HasName("PK__inventor__B59ACC48ADFA7D0A")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("FilmId")
                        .HasName("idx_fk_film_id");

                    b.HasIndex("StoreId", "FilmId")
                        .HasName("idx_fk_film_id_store_id");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("WebApplication8.Models.Language", b =>
                {
                    b.Property<byte>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("language_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("LanguageId")
                        .HasName("PK__language__804CF6B2383E6C6D")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("language");
                });

            modelBuilder.Entity("WebApplication8.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("payment_date")
                        .HasColumnType("datetime");

                    b.Property<int?>("RentalId")
                        .HasColumnName("rental_id");

                    b.Property<byte>("StaffId")
                        .HasColumnName("staff_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__payment__ED1FC9EB2511C64B")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId")
                        .HasName("idx_fk_customer_id");

                    b.HasIndex("RentalId");

                    b.HasIndex("StaffId")
                        .HasName("idx_fk_staff_id");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("WebApplication8.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rental_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<int>("InventoryId")
                        .HasColumnName("inventory_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnName("rental_date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("return_date")
                        .HasColumnType("datetime");

                    b.Property<byte>("StaffId")
                        .HasColumnName("staff_id");

                    b.HasKey("RentalId")
                        .HasName("PK__rental__67DB611A303B6220")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerId")
                        .HasName("idx_fk_customer_id");

                    b.HasIndex("InventoryId")
                        .HasName("idx_fk_inventory_id");

                    b.HasIndex("StaffId")
                        .HasName("idx_fk_staff_id");

                    b.HasIndex("RentalDate", "InventoryId", "CustomerId")
                        .IsUnique()
                        .HasName("idx_uq");

                    b.ToTable("rental");
                });

            modelBuilder.Entity("WebApplication8.Models.Staff", b =>
                {
                    b.Property<byte>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<byte[]>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("image");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.HasKey("StaffId")
                        .HasName("PK__staff__1963DD9DF09F9DA1")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId")
                        .HasName("idx_fk_address_id");

                    b.HasIndex("StoreId")
                        .HasName("idx_fk_store_id");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("WebApplication8.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_update")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("ManagerStaffId")
                        .HasColumnName("manager_staff_id");

                    b.HasKey("StoreId")
                        .HasName("PK__store__A2F2A30DA71E8C39")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressId")
                        .HasName("idx_fk_store_address");

                    b.HasIndex("ManagerStaffId")
                        .IsUnique()
                        .HasName("idx_fk_address_id");

                    b.ToTable("store");
                });

            modelBuilder.Entity("WebApplication8.Models.Address", b =>
                {
                    b.HasOne("WebApplication8.Models.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_address_city");
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("WebApplication8.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("WebApplication8.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("WebApplication8.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("WebApplication8.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication8.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication8.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("WebApplication8.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication8.Models.City", b =>
                {
                    b.HasOne("WebApplication8.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_city_country");
                });

            modelBuilder.Entity("WebApplication8.Models.Customer", b =>
                {
                    b.HasOne("WebApplication8.Models.Address", "Address")
                        .WithMany("Customer")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_customer_address");

                    b.HasOne("WebApplication8.Models.Store", "Store")
                        .WithMany("Customer")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_customer_store");
                });

            modelBuilder.Entity("WebApplication8.Models.Film", b =>
                {
                    b.HasOne("WebApplication8.Models.Language", "Language")
                        .WithMany("FilmLanguage")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("fk_film_language");

                    b.HasOne("WebApplication8.Models.Language", "OriginalLanguage")
                        .WithMany("FilmOriginalLanguage")
                        .HasForeignKey("OriginalLanguageId")
                        .HasConstraintName("fk_film_language_original");
                });

            modelBuilder.Entity("WebApplication8.Models.FilmActor", b =>
                {
                    b.HasOne("WebApplication8.Models.Actor", "Actor")
                        .WithMany("FilmActor")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("fk_film_actor_actor");

                    b.HasOne("WebApplication8.Models.Film", "Film")
                        .WithMany("FilmActor")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("fk_film_actor_film");
                });

            modelBuilder.Entity("WebApplication8.Models.FilmCategory", b =>
                {
                    b.HasOne("WebApplication8.Models.Category", "Category")
                        .WithMany("FilmCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_film_category_category");

                    b.HasOne("WebApplication8.Models.Film", "Film")
                        .WithMany("FilmCategory")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("fk_film_category_film");
                });

            modelBuilder.Entity("WebApplication8.Models.Inventory", b =>
                {
                    b.HasOne("WebApplication8.Models.Film", "Film")
                        .WithMany("Inventory")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("fk_inventory_film");

                    b.HasOne("WebApplication8.Models.Store", "Store")
                        .WithMany("Inventory")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_inventory_store");
                });

            modelBuilder.Entity("WebApplication8.Models.Payment", b =>
                {
                    b.HasOne("WebApplication8.Models.Customer", "Customer")
                        .WithMany("Payment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_payment_customer");

                    b.HasOne("WebApplication8.Models.Rental", "Rental")
                        .WithMany("Payment")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("fk_payment_rental")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApplication8.Models.Staff", "Staff")
                        .WithMany("Payment")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("fk_payment_staff");
                });

            modelBuilder.Entity("WebApplication8.Models.Rental", b =>
                {
                    b.HasOne("WebApplication8.Models.Customer", "Customer")
                        .WithMany("Rental")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_rental_customer");

                    b.HasOne("WebApplication8.Models.Inventory", "Inventory")
                        .WithMany("Rental")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("fk_rental_inventory");

                    b.HasOne("WebApplication8.Models.Staff", "Staff")
                        .WithMany("Rental")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("fk_rental_staff");
                });

            modelBuilder.Entity("WebApplication8.Models.Staff", b =>
                {
                    b.HasOne("WebApplication8.Models.Address", "Address")
                        .WithMany("Staff")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_staff_address");

                    b.HasOne("WebApplication8.Models.Store", "Store")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("fk_staff_store");
                });

            modelBuilder.Entity("WebApplication8.Models.Store", b =>
                {
                    b.HasOne("WebApplication8.Models.Address", "Address")
                        .WithMany("Store")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_store_address");

                    b.HasOne("WebApplication8.Models.Staff", "ManagerStaff")
                        .WithOne("StoreNavigation")
                        .HasForeignKey("WebApplication8.Models.Store", "ManagerStaffId")
                        .HasConstraintName("fk_store_staff");
                });
#pragma warning restore 612, 618
        }
    }
}
